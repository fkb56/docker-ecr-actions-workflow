name: Docker image build and publish
on:
  push:
    branches: [ "main" ]
      # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
env:
  aws_region: eu-west-3
  backend_dynamodb_table: terraform-backend-ddb
  aws_account_id: 794038241431
  backend_s3_bucket: myterraform56
  github_iam_role: GithubAction
  backend_iam_role: Terraform2
  image_tag: snapshot
  lifecycle_policy_file: e2e-test/policy.json
  docker_build_dir: e2e-test
  path_to_dockerfile: e2e-test/artifact.dockerfile
  TAG: 0.0.0

# concurrency required to avoid terraform lock contention during ECR provisioning
concurrency: ci-${{ github.repository }}-docker-pipeline

jobs:
  Patch:
    runs-on: ubuntu-latest
    permissions: write-all
#    permissions:
#      id-token: write
#      contents: read
#      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Minor version for each merge
        id: taggerDryRun
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          DRY_RUN: true

      - name: echo new tag
        run: |
          echo ${{steps.taggerDryRun.outputs.new_tag}} > ${{ env.TAG }}

      - name: echo tag
        run: |
          echo "The current tag is: ${{env.TAG}}"

      - shell: bash
        run: |
          echo "${{steps.taggerDryRun.outputs.new_tag}}" > version.txt

      # DO MY BUILD HERE
      # IN CASE OF FAILURE, THE STEP BELOW WILL NOT RUN.
      - name: Minor version for each merge
        id: taggerFinal
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::794038241431:role/GithubAction
          aws-region: eu-west-3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ env.aws_region }}' \
            -backend-config='bucket=${{ env.backend_s3_bucket }}' \
            -backend-config='key=docker-ecr/terraform-${{ env.ECR_REPO_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ env.backend_dynamodb_table }}'
        working-directory: ${{ github.action_path }}

      - name: Create ECR repo [TF apply]
        shell: bash
        run: |
          set -eux
          terraform apply \
            -var 'repository_name=${{ env.ECR_REPO_NAME }}' \
            -var 'lifecycle_policy=${{ env.lifecycle_policy_file }}' \
            -var 'iam_role=arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.backend_iam_role }}' \
            -var 'aws_account_id=${{ env.aws_account_id }}' \
            -auto-approve
        working-directory: ${{ github.action_path }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ env.aws_account_id }}

      - name: Print the final result
        shell: bash
        run: |
          echo "TAG=$(cat version.txt)" >> $GITHUB_ENV
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
        with:
          context: "${{ env.path_to_dockerfile }}"
          #          context: "${{ vars.PATH_TO_DOCKERFILE }}"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}
          # labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
